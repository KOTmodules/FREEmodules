#meta developer: @kotcheat

from .. import loader, utils
import random
import string
import qrcode
import io
from faker import Faker

fake = Faker()

class KOTFakeGenMod(loader.Module):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    strings = {
        "name": "KOTFakeGen",
        "pwd_doc": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è",
        "num_doc": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞",
        "id_doc": "–°–ª—É—á–∞–π–Ω–æ–µ –∏–º—è",
        "mullvad_doc": "–ö–ª—é—á Mullvad",
        "discord_doc": "–¢–æ–∫–µ–Ω Discord",
        "card_doc": "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã",
        "email_doc": "–°–ª—É—á–∞–π–Ω—ã–π email",
        "birth_doc": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
        "uuid_doc": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID",
        "mac_doc": "MAC-–∞–¥—Ä–µ—Å",
        "address_doc": "–°–ª—É—á–∞–π–Ω—ã–π –∞–¥—Ä–µ—Å",
        "username_doc": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "quote_doc": "–°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞",
        "job_doc": "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
        "license_doc": "–ù–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏",
        "ssn_doc": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSN",
        "qr_doc": "QR-–∫–æ–¥",
        "coords_doc": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
        "news_doc": "–§–µ–π–∫–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
        "btcaddr_doc": "Bitcoin-–∞–¥—Ä–µ—Å",
        "btckey_doc": "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á BTC",
        "stock_doc": "–ü—Ä–æ—Ñ–∏–ª—å –∞–∫—Ü–∏–∏"
    }
    
    def generate_password(self, length=12):
        chars = string.ascii_letters + string.digits + string.punctuation
        return ''.join(random.choice(chars) for _ in range(length))
    
    def generate_number(self, country_code="7"):
        digits = ''.join(random.choice(string.digits) for _ in range(10))
        return f"+{country_code}{digits}"
        
    def generate_btc_address(self):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ Bitcoin-–∞–¥—Ä–µ—Å–∞
        chars = string.ascii_letters + string.digits
        prefix = random.choice(["1", "3", "bc1"])
        if prefix == "1" or prefix == "3":
            length = random.randint(25, 34)
        else:
            length = random.randint(42, 62)
        return prefix + ''.join(random.choice(chars) for _ in range(length - len(prefix)))

    @loader.command()
    async def pwdcmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è"""
        args = utils.get_args_raw(message)
        try:
            length = int(args) if args else 12
            pwd = self.generate_password(length)
            await message.edit(f"üîê {pwd}")
        except ValueError:
            await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è")

    @loader.command()
    async def numcmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        args = utils.get_args_raw(message)
        country_code = args if args else "7"
        num = self.generate_number(country_code)
        await message.edit(f"üì± {num}")

    @loader.command()
    async def idcmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏"""
        await message.edit(f"üë§ {fake.name()}")

    @loader.command()
    async def mullvadcmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ Mullvad"""
        key = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(16))
        await message.edit(f"üîê {key}")

    @loader.command()
    async def discordcmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ Discord"""
        token = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(59))
        await message.edit(f"üéÆ {token}")

    @loader.command()
    async def cardcmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã"""
        card = fake.credit_card_number(card_type=None)
        await message.edit(f"üí≥ {card}")

    @loader.command()
    async def emailcmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ email"""
        email = fake.email()
        await message.edit(f"üìß {email}")

    @loader.command()
    async def birthcmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
        birth = fake.date_of_birth()
        await message.edit(f"üéÇ {birth}")

    @loader.command()
    async def uuidcmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID"""
        uuid = fake.uuid4()
        await message.edit(f"üÜî {uuid}")

    @loader.command()
    async def maccmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è MAC-–∞–¥—Ä–µ—Å–∞"""
        mac = fake.mac_address()
        await message.edit(f"üñ•Ô∏è {mac}")

    @loader.command()
    async def addresscmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
        address = fake.address()
        await message.edit(f"üè† {address}")

    @loader.command()
    async def usernamecmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        username = fake.user_name()
        await message.edit(f"üë§ {username}")

    @loader.command()
    async def quotecmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã"""
        quote = fake.sentence()
        await message.edit(f"üí¨ {quote}")

    @loader.command()
    async def jobcmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        job = fake.job()
        await message.edit(f"üíº {job}")

    @loader.command()
    async def licensecmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        license_plate = fake.license_plate()
        await message.edit(f"üöó {license_plate}")

    @loader.command()
    async def ssncmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSN"""
        ssn = fake.ssn()
        await message.edit(f"üìù {ssn}")

    @loader.command()
    async def qrcmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞"""
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è QR-–∫–æ–¥–∞")
            return
        
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(args)
        qr.make(fit=True)
        img = qr.make_image(fill='black', back_color='white')
        buf = io.BytesIO()
        img.save(buf, format='PNG')
        buf.seek(0)
        
        await message.delete()
        await self.client.send_file(
            message.chat_id,
            buf,
            caption=f"üî≥ {args}"
        )

    @loader.command()
    async def coordscmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        latitude = round(random.uniform(-90.0, 90.0), 6)
        longitude = round(random.uniform(-180.0, 180.0), 6)
        await message.edit(f"üó∫Ô∏è –®–∏—Ä–æ—Ç–∞: {latitude}, –î–æ–ª–≥–æ—Ç–∞: {longitude}")

    @loader.command()
    async def newscmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–µ–π–∫–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        headlines = [
            "–£—á–µ–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –Ω–æ–≤—ã–π –≤–∏–¥ –Ω–∞—Å–µ–∫–æ–º—ã—Ö –≤ –ê–º–∞–∑–æ–Ω–∫–µ",
            "–ò–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫—Ç–µ—Ä –æ–±—ä—è–≤–∏–ª –æ —Å–≤–æ–µ–º —É—á–∞—Å—Ç–∏–∏ –≤ –Ω–æ–≤–æ–º –ø—Ä–æ–µ–∫—Ç–µ",
            "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–ª–æ, —á—Ç–æ —à–æ–∫–æ–ª–∞–¥ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è",
            "–ù–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –æ–±–µ—â–∞–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏—é –≤ –º–µ–¥–∏—Ü–∏–Ω–µ",
            "–ê—Ä—Ö–µ–æ–ª–æ–≥–∏ –Ω–∞—à–ª–∏ –¥—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤ –ï–≥–∏–ø—Ç–µ"
        ]
        
        bodies = [
            "–°–µ–≥–æ–¥–Ω—è —É—Ç—Ä–æ–º –∫–æ–º–∞–Ω–¥–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–∏–ª–∞ –æ —Å–≤–æ–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏.",
            "–°–æ–±—ã—Ç–∏–µ –≤—ã–∑–≤–∞–ª–æ –±—É—Ä–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.",
            "–≠–∫—Å–ø–µ—Ä—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∏–Ω–¥—É—Å—Ç—Ä–∏—é.",
            "–ú–µ—Å—Ç–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –≤—ã—Ä–∞–∂–∞—é—Ç —Å–≤–æ—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            "–ù–æ–≤–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏–ª–∞—Å—å —Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é."
        ]
        
        headline = random.choice(headlines)
        body = random.choice(bodies)
        await message.edit(f"üì∞ `{headline}`\n\n`{body}`")

    @loader.command()
    async def btcaddrcmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Bitcoin-–∞–¥—Ä–µ—Å–∞"""
        btc_address = self.generate_btc_address()
        await message.edit(f"‚Çø `{btc_address}`")

    @loader.command()
    async def btckeycmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ Bitcoin"""
        btc_key = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(64))
        await message.edit(f"üîë {btc_key}")

    @loader.command()
    async def stockcmd(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∞–∫—Ü–∏–∏"""
        stock = {
            "company": fake.company(),
            "symbol": ''.join(random.choices(string.ascii_uppercase, k=4)),
            "price": round(random.uniform(10, 1000), 2),
            "volume": random.randint(1000, 1000000)
        }
        
        stock_info = (
            f"üè¢ {stock['company']}\n"
            f"üî£ {stock['symbol']}\n"
            f"üí∞ ${stock['price']}\n"
            f"üìä {stock['volume']}"
        )
        
        await message.edit(stock_info)
