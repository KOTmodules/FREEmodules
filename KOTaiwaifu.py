# meta developer: @kotcheat
# scope: hikka_only
# requires: aiohttp>=3.9.3

from hikkatl.types import Message
from .. import loader, utils
from io import BytesIO
import aiohttp
import random

@loader.tds
class KOTaiwaifuMod(loader.Module):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–Ω–∏–º–µ-–≤–∞–π—Ñ—É (by @kotcheat)"""
    strings = {"name": "KOTaiwaifu"}

    async def client_ready(self, client, db):
        self._client = client

    @loader.command(ru_doc="[—Ç–µ–≥–∏] - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–π—Ñ—É")
    async def wafcmd(self, message: Message):
        """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–æ–¥—É–ª—è"""
        args = utils.get_args_raw(message)
        allowed_tags = [
            "maid", "waifu", "marin-kitagawa",
            "mori-calliope", "raiden-shogun",
            "oppai", "selfies", "uniform", "kamisato-ayaka"
        ]
        
        attempts = 0
        while attempts < 2:  # –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏
            try:
                tags = args.split(",") if args else random.sample(allowed_tags, 2)
                tags = [tag.strip() for tag in tags if tag.strip() in allowed_tags][:2]

                async with aiohttp.ClientSession() as session:
                    async with session.get(
                        "https://api.waifu.im/search",
                        params={"included_tags": tags}
                    ) as resp:
                        if resp.status != 200:
                            continue  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                        data = await resp.json()

                    image_url = data["images"][0]["url"]
                    async with session.get(image_url) as img_resp:
                        img_data = await img_resp.read()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
                if not img_data:
                    continue

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
                file = BytesIO(img_data)
                file.name = "waifu.jpg"

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                await self._client.send_file(
                    message.peer_id,
                    file,
                    force_document=False,
                    caption=(
                        "<emoji document_id=5269260681269493579>üò≥</emoji><b> –í–∞—à–∞ –≤–∞–π—Ñ—É! </b>\n"
                        f"<b><emoji document_id=5305455843846666416>üòÄ</emoji> –¢–µ–≥–∏:</b> {', '.join(tags)}"
                    ),
                    reply_to=message.id
                )
                await message.delete()
                break  # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

            except Exception:
                attempts += 1
                if attempts == 2:  # –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å–ª–µ –¥–≤—É—Ö –ø–æ–ø—ã—Ç–æ–∫
                    await message.delete()  # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    return

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏") 
    async def tagscmd(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏"""
        tags = [
            "maid", "waifu", "marin-kitagawa",
            "mori-calliope", "raiden-shogun",
            "oppai", "selfies", "uniform", "kamisato-ayaka"
        ]
        await utils.answer(
            message,
            "<emoji document_id=5258380816144154399>üòÄ</emoji><b> –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏: </b>\n"
            f"{', '.join(tags)}"
        )

version = (1, 5, 0)