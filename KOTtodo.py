# meta developer: @kotcheat

from datetime import datetime
from telethon.tl.types import Message
from .. import loader, utils
import io


@loader.tds
class KOTtodoMod(loader.Module):
    """–ü—Ä–æ—Å—Ç–æ–π ToDo –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (by @kotcheat)"""

    strings = {
        "name": "KOTtodo",
        "added": "<blockquote><b><emoji document_id=5274055917766202507>üóì</emoji> –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞</b>\n<b><i>{}</i></b></blockquote>",
        "removed": "<blockquote><b><emoji document_id=5444856076954520455>üßæ</emoji> –£–¥–∞–ª–µ–Ω–æ:</b> <i>{}</i></blockquote>",
        "not_found": "<blockquote><b><emoji document_id=5379999674193172777>üî≠</emoji> –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b></blockquote>",
        "empty": "<blockquote><b><emoji document_id=5204284487575285695>üåê</emoji> –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç</b></blockquote>",
        "cleared": "<blockquote><b><emoji document_id=5019500511871632068>üóë</emoji> –í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã</b>\n<i>–£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: {}</i></blockquote>",
        "file_export": "<b><emoji document_id=6111889443193358766>üìÇ</emoji> –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω</b>\n<i>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</i>",
        "_cls_doc": "–ü—Ä–æ—Å—Ç–æ–π ToDo –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫",
        "_cmd_doc_ktd": "<—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
        "_cmd_doc_ktdl": "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏",
        "_cmd_doc_kutd": "[–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ)",
    }

    strings_ru = {
        "added": "<blockquote><b><emoji document_id=5274055917766202507>üóì</emoji> –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:</b>\n<b><i>{}</i></b></blockquote>",
        "removed": "<blockquote><b><emoji document_id=5444856076954520455>üßæ</emoji> –£–¥–∞–ª–µ–Ω–æ:</b> <i>{}</i></blockquote>",
        "not_found": "<blockquote><b><emoji document_id=5379999674193172777>üî≠</emoji> –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b></blockquote>",
        "empty": "<blockquote><b><emoji document_id=5204284487575285695>üåê</emoji> –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç</b></blockquote>",
        "cleared": "<blockquote><b><emoji document_id=5019500511871632068>üóë</emoji> –í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã</b>\n<i>–£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: {}</i></blockquote>",
        "file_export": "<b><emoji document_id=6111889443193358766>üìÇ</emoji> –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω</b>\n<i>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</i>",
        "_cls_doc": "–ü—Ä–æ—Å—Ç–æ–π ToDo –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫",
        "_cmd_doc_ktd": "<—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫",
        "_cmd_doc_ktdl": "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏",
        "_cmd_doc_kutd": "[–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ –Ω–æ–º–µ—Ä—É (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏)",
    }

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.db = db
        self._client = client
        self.todolist = self.get("ktodo", [])

    async def on_unload(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤—ã–≥—Ä—É–∑–∫–æ–π –º–æ–¥—É–ª—è"""
        self.set("ktodo", self.todolist)

    async def ktdcmd(self, message: Message):
        """<—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"""
        args = utils.get_args_raw(message)
        
        if not args:
            reply = await message.get_reply_message()
            if reply and reply.text:
                args = reply.text
            else:
                return

        task = {
            "text": args,
            "created": datetime.now().isoformat(),
        }
        
        self.todolist.append(task)
        self.set("ktodo", self.todolist)
        
        await utils.answer(
            message,
            self.strings("added").format(args),
        )

    async def ktdlcmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏"""
        if not self.todolist:
            await utils.answer(message, self.strings("empty"))
            return

        result = "<b><emoji document_id=5204284487575285695>üåê</emoji> –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:</b>\n\n"
        
        total_tasks = len(self.todolist)
        
        
        if total_tasks > 10:
            
            for group_start in range(0, total_tasks, 10):
                group_end = min(group_start + 10, total_tasks)
                
                
                group_text = ""
                for idx in range(group_start, group_end):
                    task = self.todolist[idx]
                    group_text += f"<b>{idx + 1}.</b> <b><i>{task['text']}</i></b>\n"
                
                
                result += f"<blockquote expandable><b><emoji document_id=5274055917766202507>üóì</emoji> –ó–∞–¥–∞—á–∏ {group_start + 1}-{group_end}</b>\n{group_text}</blockquote>\n"
        else:
            
            for idx, task in enumerate(self.todolist, 1):
                result += f"<blockquote><b>{idx}.</b> <b><i>{task['text']}</i></b></blockquote>\n"

        
        if len(result) > 4000:
            
            file_content = "<emoji document_id=5274055917766202507>üóì</emoji> –°–ü–ò–°–û–ö –ó–ê–î–ê–ß\n\n"
            for idx, task in enumerate(self.todolist, 1):
                file_content += f"{idx}. {task['text']}\n"
                file_content += f"   –°–æ–∑–¥–∞–Ω–æ: {task['created']}\n\n"
            
            
            file = io.BytesIO(file_content.encode('utf-8'))
            file.name = f"tasks_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
            await message.delete()
            await self._client.send_file(
                message.peer_id,
                file,
                caption=self.strings("file_export")
            )
        else:
            await utils.answer(message, result)

    async def kutdcmd(self, message: Message):
        """[–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"""
        args = utils.get_args_raw(message)

        
        if not args:
            count = len(self.todolist)
            if count == 0:
                await utils.answer(message, self.strings("empty"))
                return
            
            self.todolist = []
            self.set("ktodo", self.todolist)
            await utils.answer(message, self.strings("cleared").format(count))
            return

        
        try:
            idx = int(args) - 1
        except (ValueError, TypeError):
            return

        if idx < 0 or idx >= len(self.todolist):
            await utils.answer(message, self.strings("not_found"))
            return

        removed_task = self.todolist.pop(idx)
        self.set("ktodo", self.todolist)
        
        await utils.answer(
            message,
            self.strings("removed").format(removed_task["text"])
        )
